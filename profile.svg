<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="346" onload="init(evt)" viewBox="0 0 1200 346" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="346" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy record -d 10 -o profile.svg -- python -m python.run solve --day 19</text><text id="details" x="10" y="40.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="335.00"> </text><svg id="frames" x="10" width="1180" total_samples="999"><g><title>solve (python/run.py:19) (1 samples, 0.10%)</title><rect x="0.0000%" y="196" width="0.1001%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="206.50"></text></g><g><title>get_days (python/aoc_utils/finder.py:36) (1 samples, 0.10%)</title><rect x="0.0000%" y="212" width="0.1001%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="222.50"></text></g><g><title>read_text (pathlib.py:1059) (1 samples, 0.10%)</title><rect x="0.0000%" y="228" width="0.1001%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="238.50"></text></g><g><title>__lt__ (&lt;string&gt;:3) (1 samples, 0.10%)</title><rect x="0.1001%" y="276" width="0.1001%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.3501%" y="286.50"></text></g><g><title>blueprint_quality (day19.py:189) (5 samples, 0.50%)</title><rect x="0.1001%" y="244" width="0.5005%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="5"/><text x="0.3501%" y="254.50"></text></g><g><title>pop (python/common/priority_queue.py:33) (5 samples, 0.50%)</title><rect x="0.1001%" y="260" width="0.5005%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="5"/><text x="0.3501%" y="270.50"></text></g><g><title>__lt__ (&lt;string&gt;:4) (4 samples, 0.40%)</title><rect x="0.2002%" y="276" width="0.4004%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="4"/><text x="0.4502%" y="286.50"></text></g><g><title>spend_resources (day19.py:91) (1 samples, 0.10%)</title><rect x="0.6006%" y="276" width="0.1001%" height="15" fill="rgb(228,23,34)" fg:x="6" fg:w="1"/><text x="0.8506%" y="286.50"></text></g><g><title>diff_maps (day19.py:38) (1 samples, 0.10%)</title><rect x="0.6006%" y="292" width="0.1001%" height="15" fill="rgb(218,30,26)" fg:x="6" fg:w="1"/><text x="0.8506%" y="302.50"></text></g><g><title>progress (day19.py:162) (2 samples, 0.20%)</title><rect x="0.6006%" y="260" width="0.2002%" height="15" fill="rgb(220,122,19)" fg:x="6" fg:w="2"/><text x="0.8506%" y="270.50"></text></g><g><title>spend_resources (day19.py:94) (1 samples, 0.10%)</title><rect x="0.7007%" y="276" width="0.1001%" height="15" fill="rgb(250,228,42)" fg:x="7" fg:w="1"/><text x="0.9507%" y="286.50"></text></g><g><title>__hash__ (enum.py:1208) (1 samples, 0.10%)</title><rect x="0.7007%" y="292" width="0.1001%" height="15" fill="rgb(240,193,28)" fg:x="7" fg:w="1"/><text x="0.9507%" y="302.50"></text></g><g><title>progress (day19.py:165) (1 samples, 0.10%)</title><rect x="0.8008%" y="260" width="0.1001%" height="15" fill="rgb(216,20,37)" fg:x="8" fg:w="1"/><text x="1.0508%" y="270.50"></text></g><g><title>progress (day19.py:166) (2 samples, 0.20%)</title><rect x="0.9009%" y="260" width="0.2002%" height="15" fill="rgb(206,188,39)" fg:x="9" fg:w="2"/><text x="1.1509%" y="270.50"></text></g><g><title>__init__ (&lt;string&gt;:2) (1 samples, 0.10%)</title><rect x="1.1011%" y="276" width="0.1001%" height="15" fill="rgb(217,207,13)" fg:x="11" fg:w="1"/><text x="1.3511%" y="286.50"></text></g><g><title>__init__ (&lt;string&gt;:4) (1 samples, 0.10%)</title><rect x="1.2012%" y="276" width="0.1001%" height="15" fill="rgb(231,73,38)" fg:x="12" fg:w="1"/><text x="1.4512%" y="286.50"></text></g><g><title>__init__ (&lt;string&gt;:5) (2 samples, 0.20%)</title><rect x="1.3013%" y="276" width="0.2002%" height="15" fill="rgb(225,20,46)" fg:x="13" fg:w="2"/><text x="1.5513%" y="286.50"></text></g><g><title>progress (day19.py:168) (6 samples, 0.60%)</title><rect x="1.1011%" y="260" width="0.6006%" height="15" fill="rgb(210,31,41)" fg:x="11" fg:w="6"/><text x="1.3511%" y="270.50"></text></g><g><title>__init__ (&lt;string&gt;:6) (2 samples, 0.20%)</title><rect x="1.5015%" y="276" width="0.2002%" height="15" fill="rgb(221,200,47)" fg:x="15" fg:w="2"/><text x="1.7515%" y="286.50"></text></g><g><title>join_maps (day19.py:29) (1 samples, 0.10%)</title><rect x="1.9019%" y="276" width="0.1001%" height="15" fill="rgb(226,26,5)" fg:x="19" fg:w="1"/><text x="2.1519%" y="286.50"></text></g><g><title>__hash__ (enum.py:1207) (2 samples, 0.20%)</title><rect x="2.1021%" y="292" width="0.2002%" height="15" fill="rgb(249,33,26)" fg:x="21" fg:w="2"/><text x="2.3521%" y="302.50"></text></g><g><title>blueprint_quality (day19.py:190) (21 samples, 2.10%)</title><rect x="0.6006%" y="244" width="2.1021%" height="15" fill="rgb(235,183,28)" fg:x="6" fg:w="21"/><text x="0.8506%" y="254.50">b..</text></g><g><title>progress (day19.py:170) (10 samples, 1.00%)</title><rect x="1.7017%" y="260" width="1.0010%" height="15" fill="rgb(221,5,38)" fg:x="17" fg:w="10"/><text x="1.9517%" y="270.50"></text></g><g><title>join_maps (day19.py:30) (7 samples, 0.70%)</title><rect x="2.0020%" y="276" width="0.7007%" height="15" fill="rgb(247,18,42)" fg:x="20" fg:w="7"/><text x="2.2520%" y="286.50"></text></g><g><title>__hash__ (enum.py:1208) (4 samples, 0.40%)</title><rect x="2.3023%" y="292" width="0.4004%" height="15" fill="rgb(241,131,45)" fg:x="23" fg:w="4"/><text x="2.5523%" y="302.50"></text></g><g><title>__contains__ (python/common/priority_queue.py:43) (2 samples, 0.20%)</title><rect x="2.9029%" y="260" width="0.2002%" height="15" fill="rgb(249,31,29)" fg:x="29" fg:w="2"/><text x="3.1529%" y="270.50"></text></g><g><title>__eq__ (&lt;string&gt;:4) (1 samples, 0.10%)</title><rect x="3.0030%" y="276" width="0.1001%" height="15" fill="rgb(225,111,53)" fg:x="30" fg:w="1"/><text x="3.2530%" y="286.50"></text></g><g><title>__hash__ (&lt;string&gt;:3) (1 samples, 0.10%)</title><rect x="3.8038%" y="308" width="0.1001%" height="15" fill="rgb(238,160,17)" fg:x="38" fg:w="1"/><text x="4.0538%" y="318.50"></text></g><g><title>__hash__ (enum.py:1207) (1 samples, 0.10%)</title><rect x="3.9039%" y="308" width="0.1001%" height="15" fill="rgb(214,148,48)" fg:x="39" fg:w="1"/><text x="4.1539%" y="318.50"></text></g><g><title>__get__ (functools.py:1001) (10 samples, 1.00%)</title><rect x="3.2032%" y="276" width="1.0010%" height="15" fill="rgb(232,36,49)" fg:x="32" fg:w="10"/><text x="3.4532%" y="286.50"></text></g><g><title>_hash (day19.py:120) (10 samples, 1.00%)</title><rect x="3.2032%" y="292" width="1.0010%" height="15" fill="rgb(209,103,24)" fg:x="32" fg:w="10"/><text x="3.4532%" y="302.50"></text></g><g><title>__hash__ (enum.py:1208) (2 samples, 0.20%)</title><rect x="4.0040%" y="308" width="0.2002%" height="15" fill="rgb(229,88,8)" fg:x="40" fg:w="2"/><text x="4.2540%" y="318.50"></text></g><g><title>blueprint_quality (day19.py:191) (16 samples, 1.60%)</title><rect x="2.7027%" y="244" width="1.6016%" height="15" fill="rgb(213,181,19)" fg:x="27" fg:w="16"/><text x="2.9527%" y="254.50"></text></g><g><title>__hash__ (day19.py:123) (12 samples, 1.20%)</title><rect x="3.1031%" y="260" width="1.2012%" height="15" fill="rgb(254,191,54)" fg:x="31" fg:w="12"/><text x="3.3531%" y="270.50"></text></g><g><title>__get__ (functools.py:995) (1 samples, 0.10%)</title><rect x="4.2042%" y="276" width="0.1001%" height="15" fill="rgb(241,83,37)" fg:x="42" fg:w="1"/><text x="4.4542%" y="286.50"></text></g><g><title>potential (day19.py:135) (2 samples, 0.20%)</title><rect x="4.5045%" y="276" width="0.2002%" height="15" fill="rgb(233,36,39)" fg:x="45" fg:w="2"/><text x="4.7545%" y="286.50"></text></g><g><title>join_maps (day19.py:28) (2 samples, 0.20%)</title><rect x="5.2052%" y="292" width="0.2002%" height="15" fill="rgb(226,3,54)" fg:x="52" fg:w="2"/><text x="5.4552%" y="302.50"></text></g><g><title>join_maps (day19.py:29) (7 samples, 0.70%)</title><rect x="5.4054%" y="292" width="0.7007%" height="15" fill="rgb(245,192,40)" fg:x="54" fg:w="7"/><text x="5.6554%" y="302.50"></text></g><g><title>__hash__ (enum.py:1207) (5 samples, 0.50%)</title><rect x="7.6076%" y="308" width="0.5005%" height="15" fill="rgb(238,167,29)" fg:x="76" fg:w="5"/><text x="7.8576%" y="318.50"></text></g><g><title>join_maps (day19.py:30) (28 samples, 2.80%)</title><rect x="6.1061%" y="292" width="2.8028%" height="15" fill="rgb(232,182,51)" fg:x="61" fg:w="28"/><text x="6.3561%" y="302.50">jo..</text></g><g><title>__hash__ (enum.py:1208) (8 samples, 0.80%)</title><rect x="8.1081%" y="308" width="0.8008%" height="15" fill="rgb(231,60,39)" fg:x="81" fg:w="8"/><text x="8.3581%" y="318.50"></text></g><g><title>potential (day19.py:136) (43 samples, 4.30%)</title><rect x="4.7047%" y="276" width="4.3043%" height="15" fill="rgb(208,69,12)" fg:x="47" fg:w="43"/><text x="4.9547%" y="286.50">poten..</text></g><g><title>join_maps (day19.py:31) (1 samples, 0.10%)</title><rect x="8.9089%" y="292" width="0.1001%" height="15" fill="rgb(235,93,37)" fg:x="89" fg:w="1"/><text x="9.1589%" y="302.50"></text></g><g><title>potential (day19.py:138) (5 samples, 0.50%)</title><rect x="9.0090%" y="276" width="0.5005%" height="15" fill="rgb(213,116,39)" fg:x="90" fg:w="5"/><text x="9.2590%" y="286.50"></text></g><g><title>diff_maps (day19.py:37) (1 samples, 0.10%)</title><rect x="10.3103%" y="292" width="0.1001%" height="15" fill="rgb(222,207,29)" fg:x="103" fg:w="1"/><text x="10.5603%" y="302.50"></text></g><g><title>diff_maps (day19.py:38) (23 samples, 2.30%)</title><rect x="10.4104%" y="292" width="2.3023%" height="15" fill="rgb(206,96,30)" fg:x="104" fg:w="23"/><text x="10.6604%" y="302.50">d..</text></g><g><title>diff_maps (day19.py:39) (22 samples, 2.20%)</title><rect x="12.7127%" y="292" width="2.2022%" height="15" fill="rgb(218,138,4)" fg:x="127" fg:w="22"/><text x="12.9627%" y="302.50">d..</text></g><g><title>__hash__ (enum.py:1208) (8 samples, 0.80%)</title><rect x="14.1141%" y="308" width="0.8008%" height="15" fill="rgb(250,191,14)" fg:x="141" fg:w="8"/><text x="14.3641%" y="318.50"></text></g><g><title>diff_maps (day19.py:40) (2 samples, 0.20%)</title><rect x="14.9149%" y="292" width="0.2002%" height="15" fill="rgb(239,60,40)" fg:x="149" fg:w="2"/><text x="15.1649%" y="302.50"></text></g><g><title>__hash__ (enum.py:1207) (2 samples, 0.20%)</title><rect x="16.1161%" y="308" width="0.2002%" height="15" fill="rgb(206,27,48)" fg:x="161" fg:w="2"/><text x="16.3661%" y="318.50"></text></g><g><title>diff_maps (day19.py:42) (16 samples, 1.60%)</title><rect x="15.1151%" y="292" width="1.6016%" height="15" fill="rgb(225,35,8)" fg:x="151" fg:w="16"/><text x="15.3651%" y="302.50"></text></g><g><title>__hash__ (enum.py:1208) (4 samples, 0.40%)</title><rect x="16.3163%" y="308" width="0.4004%" height="15" fill="rgb(250,213,24)" fg:x="163" fg:w="4"/><text x="16.5663%" y="318.50"></text></g><g><title>potential (day19.py:139) (76 samples, 7.61%)</title><rect x="9.5095%" y="276" width="7.6076%" height="15" fill="rgb(247,123,22)" fg:x="95" fg:w="76"/><text x="9.7595%" y="286.50">potential ..</text></g><g><title>diff_maps (day19.py:43) (4 samples, 0.40%)</title><rect x="16.7167%" y="292" width="0.4004%" height="15" fill="rgb(231,138,38)" fg:x="167" fg:w="4"/><text x="16.9667%" y="302.50"></text></g><g><title>potential (day19.py:140) (4 samples, 0.40%)</title><rect x="17.1171%" y="276" width="0.4004%" height="15" fill="rgb(231,145,46)" fg:x="171" fg:w="4"/><text x="17.3671%" y="286.50"></text></g><g><title>potential (day19.py:141) (1 samples, 0.10%)</title><rect x="17.5175%" y="276" width="0.1001%" height="15" fill="rgb(251,118,11)" fg:x="175" fg:w="1"/><text x="17.7675%" y="286.50"></text></g><g><title>__hash__ (enum.py:1207) (1 samples, 0.10%)</title><rect x="19.3193%" y="292" width="0.1001%" height="15" fill="rgb(217,147,25)" fg:x="193" fg:w="1"/><text x="19.5693%" y="302.50"></text></g><g><title>potential (day19.py:142) (20 samples, 2.00%)</title><rect x="17.6176%" y="276" width="2.0020%" height="15" fill="rgb(247,81,37)" fg:x="176" fg:w="20"/><text x="17.8676%" y="286.50">p..</text></g><g><title>__hash__ (enum.py:1208) (2 samples, 0.20%)</title><rect x="19.4194%" y="292" width="0.2002%" height="15" fill="rgb(209,12,38)" fg:x="194" fg:w="2"/><text x="19.6694%" y="302.50"></text></g><g><title>potential (day19.py:143) (15 samples, 1.50%)</title><rect x="19.6196%" y="276" width="1.5015%" height="15" fill="rgb(227,1,9)" fg:x="196" fg:w="15"/><text x="19.8696%" y="286.50"></text></g><g><title>__hash__ (enum.py:1208) (4 samples, 0.40%)</title><rect x="20.7207%" y="292" width="0.4004%" height="15" fill="rgb(248,47,43)" fg:x="207" fg:w="4"/><text x="20.9707%" y="302.50"></text></g><g><title>potential (day19.py:145) (3 samples, 0.30%)</title><rect x="21.1211%" y="276" width="0.3003%" height="15" fill="rgb(221,10,30)" fg:x="211" fg:w="3"/><text x="21.3711%" y="286.50"></text></g><g><title>__hash__ (enum.py:1208) (1 samples, 0.10%)</title><rect x="21.3213%" y="292" width="0.1001%" height="15" fill="rgb(210,229,1)" fg:x="213" fg:w="1"/><text x="21.5713%" y="302.50"></text></g><g><title>__get__ (functools.py:1001) (170 samples, 17.02%)</title><rect x="4.5045%" y="260" width="17.0170%" height="15" fill="rgb(222,148,37)" fg:x="45" fg:w="170"/><text x="4.7545%" y="270.50">__get__ (functools.py:1001)</text></g><g><title>potential (day19.py:147) (1 samples, 0.10%)</title><rect x="21.4214%" y="276" width="0.1001%" height="15" fill="rgb(234,67,33)" fg:x="214" fg:w="1"/><text x="21.6714%" y="286.50"></text></g><g><title>__get__ (functools.py:995) (1 samples, 0.10%)</title><rect x="21.5215%" y="260" width="0.1001%" height="15" fill="rgb(247,98,35)" fg:x="215" fg:w="1"/><text x="21.7715%" y="270.50"></text></g><g><title>blueprint_quality (day19.py:192) (174 samples, 17.42%)</title><rect x="4.3043%" y="244" width="17.4174%" height="15" fill="rgb(247,138,52)" fg:x="43" fg:w="174"/><text x="4.5543%" y="254.50">blueprint_quality (day19.py..</text></g><g><title>__get__ (functools.py:997) (1 samples, 0.10%)</title><rect x="21.6216%" y="260" width="0.1001%" height="15" fill="rgb(213,79,30)" fg:x="216" fg:w="1"/><text x="21.8716%" y="270.50"></text></g><g><title>blueprint_quality (day19.py:196) (1 samples, 0.10%)</title><rect x="21.7217%" y="244" width="0.1001%" height="15" fill="rgb(246,177,23)" fg:x="217" fg:w="1"/><text x="21.9717%" y="254.50"></text></g><g><title>__eq__ (&lt;string&gt;:4) (2 samples, 0.20%)</title><rect x="22.3223%" y="260" width="0.2002%" height="15" fill="rgb(230,62,27)" fg:x="223" fg:w="2"/><text x="22.5723%" y="270.50"></text></g><g><title>__hash__ (enum.py:1207) (1 samples, 0.10%)</title><rect x="22.5225%" y="260" width="0.1001%" height="15" fill="rgb(216,154,8)" fg:x="225" fg:w="1"/><text x="22.7725%" y="270.50"></text></g><g><title>__hash__ (enum.py:1208) (1 samples, 0.10%)</title><rect x="22.6226%" y="260" width="0.1001%" height="15" fill="rgb(244,35,45)" fg:x="226" fg:w="1"/><text x="22.8726%" y="270.50"></text></g><g><title>existing_total_for_resource (day19.py:127) (7 samples, 0.70%)</title><rect x="22.7227%" y="260" width="0.7007%" height="15" fill="rgb(251,115,12)" fg:x="227" fg:w="7"/><text x="22.9727%" y="270.50"></text></g><g><title>blueprint_quality (day19.py:203) (18 samples, 1.80%)</title><rect x="21.8218%" y="244" width="1.8018%" height="15" fill="rgb(240,54,50)" fg:x="218" fg:w="18"/><text x="22.0718%" y="254.50">b..</text></g><g><title>existing_total_for_resource (day19.py:128) (2 samples, 0.20%)</title><rect x="23.4234%" y="260" width="0.2002%" height="15" fill="rgb(233,84,52)" fg:x="234" fg:w="2"/><text x="23.6734%" y="270.50"></text></g><g><title>blueprint_quality (day19.py:207) (1 samples, 0.10%)</title><rect x="23.6236%" y="244" width="0.1001%" height="15" fill="rgb(207,117,47)" fg:x="236" fg:w="1"/><text x="23.8736%" y="254.50"></text></g><g><title>__get__ (functools.py:997) (1 samples, 0.10%)</title><rect x="24.0240%" y="276" width="0.1001%" height="15" fill="rgb(249,43,39)" fg:x="240" fg:w="1"/><text x="24.2740%" y="286.50"></text></g><g><title>blueprint_quality (day19.py:208) (5 samples, 0.50%)</title><rect x="23.7237%" y="244" width="0.5005%" height="15" fill="rgb(209,38,44)" fg:x="237" fg:w="5"/><text x="23.9737%" y="254.50"></text></g><g><title>__lt__ (day19.py:107) (4 samples, 0.40%)</title><rect x="23.8238%" y="260" width="0.4004%" height="15" fill="rgb(236,212,23)" fg:x="238" fg:w="4"/><text x="24.0738%" y="270.50"></text></g><g><title>__get__ (functools.py:999) (1 samples, 0.10%)</title><rect x="24.1241%" y="276" width="0.1001%" height="15" fill="rgb(242,79,21)" fg:x="241" fg:w="1"/><text x="24.3741%" y="286.50"></text></g><g><title>blueprint_quality (day19.py:209) (7 samples, 0.70%)</title><rect x="24.2242%" y="244" width="0.7007%" height="15" fill="rgb(211,96,35)" fg:x="242" fg:w="7"/><text x="24.4742%" y="254.50"></text></g><g><title>diff_maps (day19.py:34) (19 samples, 1.90%)</title><rect x="33.3333%" y="260" width="1.9019%" height="15" fill="rgb(253,215,40)" fg:x="333" fg:w="19"/><text x="33.5833%" y="270.50">d..</text></g><g><title>diff_maps (day19.py:37) (29 samples, 2.90%)</title><rect x="35.2352%" y="260" width="2.9029%" height="15" fill="rgb(211,81,21)" fg:x="352" fg:w="29"/><text x="35.4852%" y="270.50">di..</text></g><g><title>diff_maps (day19.py:38) (113 samples, 11.31%)</title><rect x="38.1381%" y="260" width="11.3113%" height="15" fill="rgb(208,190,38)" fg:x="381" fg:w="113"/><text x="38.3881%" y="270.50">diff_maps (day19...</text></g><g><title>__hash__ (enum.py:1207) (27 samples, 2.70%)</title><rect x="67.6677%" y="276" width="2.7027%" height="15" fill="rgb(235,213,38)" fg:x="676" fg:w="27"/><text x="67.9177%" y="286.50">__..</text></g><g><title>diff_maps (day19.py:39) (304 samples, 30.43%)</title><rect x="49.4494%" y="260" width="30.4304%" height="15" fill="rgb(237,122,38)" fg:x="494" fg:w="304"/><text x="49.6994%" y="270.50">diff_maps (day19.py:39)</text></g><g><title>__hash__ (enum.py:1208) (95 samples, 9.51%)</title><rect x="70.3704%" y="276" width="9.5095%" height="15" fill="rgb(244,218,35)" fg:x="703" fg:w="95"/><text x="70.6204%" y="286.50">__hash__ (enum..</text></g><g><title>diff_maps (day19.py:40) (22 samples, 2.20%)</title><rect x="79.8799%" y="260" width="2.2022%" height="15" fill="rgb(240,68,47)" fg:x="798" fg:w="22"/><text x="80.1299%" y="270.50">d..</text></g><g><title>diff_maps (day19.py:41) (21 samples, 2.10%)</title><rect x="82.0821%" y="260" width="2.1021%" height="15" fill="rgb(210,16,53)" fg:x="820" fg:w="21"/><text x="82.3321%" y="270.50">d..</text></g><g><title>__hash__ (enum.py:1207) (8 samples, 0.80%)</title><rect x="90.4905%" y="276" width="0.8008%" height="15" fill="rgb(235,124,12)" fg:x="904" fg:w="8"/><text x="90.7405%" y="286.50"></text></g><g><title>diff_maps (day19.py:42) (137 samples, 13.71%)</title><rect x="84.1842%" y="260" width="13.7137%" height="15" fill="rgb(224,169,11)" fg:x="841" fg:w="137"/><text x="84.4342%" y="270.50">diff_maps (day19.py:4..</text></g><g><title>__hash__ (enum.py:1208) (66 samples, 6.61%)</title><rect x="91.2913%" y="276" width="6.6066%" height="15" fill="rgb(250,166,2)" fg:x="912" fg:w="66"/><text x="91.5413%" y="286.50">__hash__ ..</text></g><g><title>blueprint_quality (day19.py:210) (736 samples, 73.67%)</title><rect x="24.9249%" y="244" width="73.6737%" height="15" fill="rgb(242,216,29)" fg:x="249" fg:w="736"/><text x="25.1749%" y="254.50">blueprint_quality (day19.py:210)</text></g><g><title>diff_maps (day19.py:43) (7 samples, 0.70%)</title><rect x="97.8979%" y="260" width="0.7007%" height="15" fill="rgb(230,116,27)" fg:x="978" fg:w="7"/><text x="98.1479%" y="270.50"></text></g><g><title>blueprint_quality (day19.py:211) (5 samples, 0.50%)</title><rect x="98.5986%" y="244" width="0.5005%" height="15" fill="rgb(228,99,48)" fg:x="985" fg:w="5"/><text x="98.8486%" y="254.50"></text></g><g><title>blueprint_quality (day19.py:214) (1 samples, 0.10%)</title><rect x="99.0991%" y="244" width="0.1001%" height="15" fill="rgb(253,11,6)" fg:x="990" fg:w="1"/><text x="99.3491%" y="254.50"></text></g><g><title>push (python/common/priority_queue.py:22) (2 samples, 0.20%)</title><rect x="99.2993%" y="260" width="0.2002%" height="15" fill="rgb(247,143,39)" fg:x="992" fg:w="2"/><text x="99.5493%" y="270.50"></text></g><g><title>__hash__ (day19.py:122) (2 samples, 0.20%)</title><rect x="99.2993%" y="276" width="0.2002%" height="15" fill="rgb(236,97,10)" fg:x="992" fg:w="2"/><text x="99.5493%" y="286.50"></text></g><g><title>blueprint_quality (day19.py:216) (4 samples, 0.40%)</title><rect x="99.1992%" y="244" width="0.4004%" height="15" fill="rgb(233,208,19)" fg:x="991" fg:w="4"/><text x="99.4492%" y="254.50"></text></g><g><title>push (python/common/priority_queue.py:29) (1 samples, 0.10%)</title><rect x="99.4995%" y="260" width="0.1001%" height="15" fill="rgb(216,164,2)" fg:x="994" fg:w="1"/><text x="99.7495%" y="270.50"></text></g><g><title>__lt__ (&lt;string&gt;:3) (1 samples, 0.10%)</title><rect x="99.4995%" y="276" width="0.1001%" height="15" fill="rgb(220,129,5)" fg:x="994" fg:w="1"/><text x="99.7495%" y="286.50"></text></g><g><title>blueprint_quality (day19.py:217) (3 samples, 0.30%)</title><rect x="99.5996%" y="244" width="0.3003%" height="15" fill="rgb(242,17,10)" fg:x="995" fg:w="3"/><text x="99.8496%" y="254.50"></text></g><g><title>__lt__ (day19.py:107) (1 samples, 0.10%)</title><rect x="99.7998%" y="260" width="0.1001%" height="15" fill="rgb(242,107,0)" fg:x="997" fg:w="1"/><text x="100.0498%" y="270.50"></text></g><g><title>all (999 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(251,28,31)" fg:x="0" fg:w="999"/><text x="0.2500%" y="62.50"></text></g><g><title>_run_module_as_main (&lt;frozen runpy&gt;:198) (999 samples, 100.00%)</title><rect x="0.0000%" y="68" width="100.0000%" height="15" fill="rgb(233,223,10)" fg:x="0" fg:w="999"/><text x="0.2500%" y="78.50">_run_module_as_main (&lt;frozen runpy&gt;:198)</text></g><g><title>_run_code (&lt;frozen runpy&gt;:88) (999 samples, 100.00%)</title><rect x="0.0000%" y="84" width="100.0000%" height="15" fill="rgb(215,21,27)" fg:x="0" fg:w="999"/><text x="0.2500%" y="94.50">_run_code (&lt;frozen runpy&gt;:88)</text></g><g><title>&lt;module&gt; (python/run.py:71) (999 samples, 100.00%)</title><rect x="0.0000%" y="100" width="100.0000%" height="15" fill="rgb(232,23,21)" fg:x="0" fg:w="999"/><text x="0.2500%" y="110.50">&lt;module&gt; (python/run.py:71)</text></g><g><title>__call__ (click/core.py:1130) (999 samples, 100.00%)</title><rect x="0.0000%" y="116" width="100.0000%" height="15" fill="rgb(244,5,23)" fg:x="0" fg:w="999"/><text x="0.2500%" y="126.50">__call__ (click/core.py:1130)</text></g><g><title>main (click/core.py:1055) (999 samples, 100.00%)</title><rect x="0.0000%" y="132" width="100.0000%" height="15" fill="rgb(226,81,46)" fg:x="0" fg:w="999"/><text x="0.2500%" y="142.50">main (click/core.py:1055)</text></g><g><title>invoke (click/core.py:1657) (999 samples, 100.00%)</title><rect x="0.0000%" y="148" width="100.0000%" height="15" fill="rgb(247,70,30)" fg:x="0" fg:w="999"/><text x="0.2500%" y="158.50">invoke (click/core.py:1657)</text></g><g><title>invoke (click/core.py:1404) (999 samples, 100.00%)</title><rect x="0.0000%" y="164" width="100.0000%" height="15" fill="rgb(212,68,19)" fg:x="0" fg:w="999"/><text x="0.2500%" y="174.50">invoke (click/core.py:1404)</text></g><g><title>invoke (click/core.py:760) (999 samples, 100.00%)</title><rect x="0.0000%" y="180" width="100.0000%" height="15" fill="rgb(240,187,13)" fg:x="0" fg:w="999"/><text x="0.2500%" y="190.50">invoke (click/core.py:760)</text></g><g><title>solve (python/run.py:29) (998 samples, 99.90%)</title><rect x="0.1001%" y="196" width="99.8999%" height="15" fill="rgb(223,113,26)" fg:x="1" fg:w="998"/><text x="0.3501%" y="206.50">solve (python/run.py:29)</text></g><g><title>part1 (day19.py:228) (998 samples, 99.90%)</title><rect x="0.1001%" y="212" width="99.8999%" height="15" fill="rgb(206,192,2)" fg:x="1" fg:w="998"/><text x="0.3501%" y="222.50">part1 (day19.py:228)</text></g><g><title>&lt;genexpr&gt; (day19.py:228) (998 samples, 99.90%)</title><rect x="0.1001%" y="228" width="99.8999%" height="15" fill="rgb(241,108,4)" fg:x="1" fg:w="998"/><text x="0.3501%" y="238.50">&lt;genexpr&gt; (day19.py:228)</text></g><g><title>blueprint_quality (day19.py:222) (1 samples, 0.10%)</title><rect x="99.8999%" y="244" width="0.1001%" height="15" fill="rgb(247,173,49)" fg:x="998" fg:w="1"/><text x="100.1499%" y="254.50"></text></g></svg></svg>